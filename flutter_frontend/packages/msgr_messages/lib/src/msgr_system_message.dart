import 'package:meta/meta.dart';

import 'msgr_message.dart';
import 'msgr_theme.dart';

/// Severity level for system generated messages.
enum MsgrSystemMessageLevel {
  /// Informational notification.
  info,

  /// Highlights something that needs attention.
  warning,

  /// Represents errors or blocking issues.
  error,
}

/// Message generated by the platform rather than a user profile.
@immutable
class MsgrSystemMessage extends MsgrMessage {
  /// Creates a system message with optional severity [level].
  const MsgrSystemMessage({
    required super.id,
    required this.text,
    this.level = MsgrSystemMessageLevel.info,
    super.sentAt,
    super.insertedAt,
    super.isLocal,
    super.theme,
  }) : super(kind: MsgrMessageKind.system);

  /// Body of the system message.
  final String text;

  /// Severity indicator that informs how the UI should render the message.
  final MsgrSystemMessageLevel level;

  /// Creates a copy with selectively overridden fields.
  MsgrSystemMessage copyWith({
    String? id,
    String? text,
    MsgrSystemMessageLevel? level,
    DateTime? sentAt,
    DateTime? insertedAt,
    bool? isLocal,
    MsgrMessageTheme? theme,
  }) {
    return MsgrSystemMessage(
      id: id ?? this.id,
      text: text ?? this.text,
      level: level ?? this.level,
      sentAt: sentAt ?? this.sentAt,
      insertedAt: insertedAt ?? this.insertedAt,
      isLocal: isLocal ?? this.isLocal,
      theme: theme ?? this.theme,
    );
  }

  /// Creates a [MsgrSystemMessage] from a JSON compatible map.
  factory MsgrSystemMessage.fromMap(Map<String, dynamic> map) {
    final levelValue = map['level'] as String?;
    final parsedLevel = MsgrSystemMessageLevel.values.firstWhere(
      (element) => element.name == levelValue,
      orElse: () => MsgrSystemMessageLevel.info,
    );
    return MsgrSystemMessage(
      id: map['id'] as String,
      text: map['text'] as String? ?? '',
      level: parsedLevel,
      sentAt: MsgrMessage.parseTimestamp(map['sentAt'] ?? map['sent_at']),
      insertedAt:
          MsgrMessage.parseTimestamp(map['insertedAt'] ?? map['inserted_at']),
      isLocal: map['isLocal'] as bool? ?? false,
      theme: MsgrMessage.readTheme(map),
    );
  }

  @override
  Map<String, dynamic> toMap() {
    return {
      'type': kind.name,
      'id': id,
      'text': text,
      'level': level.name,
      'sentAt': MsgrMessage.encodeTimestamp(sentAt),
      'insertedAt': MsgrMessage.encodeTimestamp(insertedAt),
      'isLocal': isLocal,
      'theme': theme.toMap(),
    };
  }

  @override
  List<Object?> get props => [...super.props, text, level];

  @override
  MsgrSystemMessage themed(MsgrMessageTheme theme) => copyWith(theme: theme);
}
